---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app authelia
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 3.5.1
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  values:
    controllers:
      authelia:
        replicas: 2
        strategy: RollingUpdate
        annotations:
          reloader.stakater.com/auto: "true"
        initContainers:
          init-db:
            image:
              repository: ghcr.io/onedr0p/postgres-init
              tag: 16
            env:
              INIT_POSTGRES_HOST: &dbHost postgres-1-rw.database.svc.cluster.local
              INIT_POSTGRES_DBNAME: &dbName authelia
              INIT_POSTGRES_USER:
                valueFrom:
                  secretKeyRef:
                    name: authelia-secret
                    key: AUTHELIA_STORAGE_POSTGRES_USERNAME
              INIT_POSTGRES_PASS:
                valueFrom:
                  secretKeyRef:
                    name: authelia-secret
                    key: AUTHELIA_STORAGE_POSTGRES_PASSWORD
              INIT_POSTGRES_SUPER_PASS:
                valueFrom:
                  secretKeyRef:
                    name: cloudnative-pg-secret
                    key: password
        containers:
          app:
            image:
              repository: ghcr.io/authelia/authelia
              tag: v4.38.17@sha256:bd0b56ab682ecdf994cc66bbbf75e3ab437a3e4aea4c707eeea0c2fca6cf945e
            env:
              AUTHELIA_THEME: light
              AUTHELIA_SERVER_DISABLE_HEALTHCHECK: "true"
              AUTHELIA_SERVER_ADDRESS: tcp://0.0.0.0:80
              AUTHELIA_TELEMETRY_METRICS_ADDRESS: tcp://0.0.0.0:8080
              AUTHELIA_TELEMETRY_METRICS_ENABLED: "true"
              AUTHELIA_SESSION_REDIS_HOST: dragonfly.database.svc.cluster.local
              AUTHELIA_SESSION_REDIS_PORT: 6379
              AUTHELIA_SESSION_REDIS_PASSWORD:
                valueFrom:
                  secretKeyRef:
                    name: dragonfly-secret
                    key: password
              AUTHELIA_SESSION_REDIS_DATABASE_INDEX: 2
              AUTHELIA_STORAGE_POSTGRES_DATABASE: *dbName
              AUTHELIA_STORAGE_POSTGRES_ADDRESS: *dbHost
              AUTHELIA_NOTIFIER_DISABLE_STARTUP_CHECK: "true"
              AUTHELIA_NOTIFIER_SMTP_SENDER: "Authelia <${SECRET_SMTP_FROM}>"
              AUTHELIA_NOTIFIER_SMTP_DISABLE_REQUIRE_TLS: "true"
              AUTHELIA_AUTHENTICATION_BACKEND_PASSWORD_RESET_DISABLE: "true"
              AUTHELIA_AUTHENTICATION_BACKEND_REFRESH_INTERVAL: 1m
              AUTHELIA_AUTHENTICATION_BACKEND_LDAP_IMPLEMENTATION: custom
              AUTHELIA_AUTHENTICATION_BACKEND_LDAP_ADDRESS: ldap://lldap.auth.svc.cluster.local:1389
              AUTHELIA_AUTHENTICATION_BACKEND_LDAP_TIMEOUT: 5s
              AUTHELIA_AUTHENTICATION_BACKEND_LDAP_START_TLS: "false"
              AUTHELIA_AUTHENTICATION_BACKEND_LDAP_BASE_DN: dc=rare,dc=arpa
              AUTHELIA_AUTHENTICATION_BACKEND_LDAP_USERS_FILTER: "(&({username_attribute}={input})(objectClass=person))"
              AUTHELIA_AUTHENTICATION_BACKEND_LDAP_ADDITIONAL_USERS_DN: ou=people
              AUTHELIA_AUTHENTICATION_BACKEND_LDAP_ADDITIONAL_GROUPS_DN: ou=groups
              AUTHELIA_AUTHENTICATION_BACKEND_LDAP_GROUPS_FILTER: "(member={dn})"
              AUTHELIA_AUTHENTICATION_BACKEND_LDAP_USER: uid=authelia,ou=people,dc=rare,dc=arpa
              AUTHELIA_AUTHENTICATION_BACKEND_LDAP_ATTRIBUTES_USERNAME: uid
              AUTHELIA_AUTHENTICATION_BACKEND_LDAP_ATTRIBUTES_DISPLAY_NAME: displayName
              AUTHELIA_AUTHENTICATION_BACKEND_LDAP_ATTRIBUTES_GROUP_NAME: cn
              AUTHELIA_AUTHENTICATION_BACKEND_LDAP_ATTRIBUTES_MAIL: mail
              AUTHELIA_AUTHENTICATION_BACKEND_LDAP_ATTRIBUTES_MEMBER_OF: memberOf
              AUTHELIA_ACCESS_CONTROL_DEFAULT_POLICY: one_factor
              AUTHELIA_DUO_API_DISABLE: "true"
              AUTHELIA_TOTP_DISABLE: false
              AUTHELIA_TOTP_ISSUER: authelia.com
              X_AUTHELIA_CONFIG: /config/configuration.yaml
              X_AUTHELIA_CONFIG_FILTERS: template
              SECRET_EXTERNAL_DOMAIN: "${SECRET_EXTERNAL_DOMAIN}"
              SECRET_INTERNAL_DOMAIN: "${SECRET_INTERNAL_DOMAIN}"
              CLUSTER_CIDR: "${CLUSTER_CIDR}"
              NODE_CIDR: "${NODE_CIDR}"
              HOME_CIDR: "${HOME_CIDR}"
              MGMT_CIDR: "${MGMT_CIDR}"
              VPN_CIDR: "${VPN_CIDR}"
            envFrom:
              - secretRef:
                  name: authelia-secret
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: &path /api/health
                    port: &port 80
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
              startup:
                enabled: false
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities:
                drop:
                  - ALL
            resources:
              requests:
                cpu: 10m
              limits:
                memory: 128Mi
    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        seccompProfile: { type: RuntimeDefault }
      #        topologySpreadConstraints:
      #          - maxSkew: 1
      #            topologyKey: kubernetes.io/hostname
      #            whenUnsatisfiable: DoNotSchedule
      #            labelSelector:
      #              matchLabels:
      #              app.kubernetes.io/name: *app
    ingress:
      app:
        className: traefik
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-production"
          gethomepage.dev/enabled: "true"
          gethomepage.dev/group: Services
          gethomepage.dev/name: Authelia
          gethomepage.dev/description: OIDC/MFA provider
          gethomepage.dev/icon: *app
        hosts:
          - host: &host "auth.${SECRET_EXTERNAL_DOMAIN}"
            paths:
              - path: /
                service:
                  identifier: app
                  port: http
        tls:
          - secretName: authelia-tls
            hosts: [*host]
    persistence:
      config:
        enabled: true
        type: configMap
        name: authelia-config
        globalMounts:
          - path: /config/configuration.yaml
            subPath: configuration.yaml
            readOnly: true
    service:
      app:
        controller: *app
        ports:
          http:
            port: *port
          metrics:
            port: 8080
    serviceMonitor:
      app:
        serviceName: *app
        enabled: true
        endpoints:
          - port: metrics
            scheme: http
            path: /metrics
            interval: 30s
            scrapeTimeout: 30s
