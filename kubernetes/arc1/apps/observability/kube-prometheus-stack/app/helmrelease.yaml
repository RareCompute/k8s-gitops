---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/helm.toolkit.fluxcd.io/helmrelease_v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
spec:
  interval: 30m
  timeout: 15m
  chart:
    spec:
      chart: kube-prometheus-stack
      version: 65.5.0
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: flux-system
  install:
    crds: Skip
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    crds: Skip
    remediation:
      strategy: rollback
      retries: 3
  dependsOn:
    - name: prometheus-operator-crds
      namespace: observability
    - name: openebs
      namespace: openebs
    - name: traefik
      namespace: traefik-ingress
  values:
    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          # Drop high cardinality labels
          - action: labeldrop
            regex: (uid)
          - action: labeldrop
            regex: (id|name)
          - action: drop
            sourceLabels: ["__name__"]
            regex: (rest_client_request_duration_seconds_bucket|rest_client_request_duration_seconds_sum|rest_client_request_duration_seconds_count)
    kubeApiServer:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          # Drop high cardinality labels
          - action: drop
            sourceLabels: ["__name__"]
            regex: (apiserver|etcd|rest_client)_request(|_sli|_slo)_duration_seconds_bucket
          - action: drop
            sourceLabels: ["__name__"]
            regex: (apiserver_response_sizes_bucket|apiserver_watch_events_sizes_bucket)
    kubeControllerManager:
      enabled: true
      endpoints: &kubeApiIP
        - 10.2.10.10
    kubeScheduler:
      enabled: true
      endpoints: *kubeApiIP
    kubeEtcd:
      enabled: false
    kubeProxy:
      enabled: false
    prometheus:
      ingress:
        enabled: true
        ingressClassName: traefik
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-production"
          gethomepage.dev/enabled: "true"
          gethomepage.dev/group: Services
          gethomepage.dev/name: Prometheus
          gethomepage.dev/description: Time-series event monitoring
          gethomepage.dev/icon: prometheus.png
        hosts: ["prometheus.${SECRET_INTERNAL_DOMAIN}"]
        pathType: Prefix
        tls:
          - secretName: prometheus-tls
            hosts: ["prometheus.${SECRET_INTERNAL_DOMAIN}"]
      prometheusSpec:
        scrapeInterval: 1m # Must match interval in Grafana Helm chart
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        scrapeConfigSelectorNilUsesHelmValues: false
        enableFeatures:
          - auto-gomemlimit
          - memory-snapshot-on-shutdown
          - new-service-discovery-manager
        retention: 14d
        retentionSize: 70GB
        resources:
          requests:
            cpu: 100m
          limits:
            memory: 1500Mi
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: "local-nvme"
              accessModes: ["ReadWriteOnce"]
              retain: true
              resources:
                requests:
                  storage: 75Gi
    # TODO: Add separate grafana helmrelease
    # TODO: Add temperatures dashboard
    # TODO: Add GPUs dashboard
    grafana:
      forceDeployDashboards: true
      persistence:
        enabled: true
        type: pvc
        storageClassName: "local-nvme"
        accessModes: ["ReadWriteOnce"]
        size: 32Gi
      sidecar:
        dashboards:
          enabled: true
          searchNamespace: ALL
          label: grafana_dashboard
          folderAnnotation: grafana_folder
          provider:
            disableDelete: true
            foldersFromFilesStructure: true
        datasources:
          enabled: true
          searchNamespace: ALL
          labelValue: ""
      serviceMonitor:
        enabled: true
      testFramework:
        enabled: false
      ingress:
        enabled: true
        ingressClassName: traefik
        labels:
          teleport: enabled
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-production"
          gethomepage.dev/enabled: "true"
          gethomepage.dev/group: Services
          gethomepage.dev/name: Grafana
          gethomepage.dev/description: Data visualization
          gethomepage.dev/icon: grafana.png
        hosts: ["grafana.${SECRET_INTERNAL_DOMAIN}"]
        pathType: Prefix
        tls:
          - secretName: kube-prometheus-stack-tls
            hosts: ["grafana.${SECRET_INTERNAL_DOMAIN}"]
    alertmanager:
      ingress:
        enabled: true
        ingressClassName: traefik
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-production"
          gethomepage.dev/enabled: "true"
          gethomepage.dev/group: Services
          gethomepage.dev/name: Alert Manager
          gethomepage.dev/description: Alert handler for kube-prometheus-stack
          gethomepage.dev/icon: alertmanager.png
        hosts: ["alertmanager.${SECRET_INTERNAL_DOMAIN}"]
        pathType: Prefix
        tls:
          - secretName: alertmanager-tls
            hosts: ["alertmanager.${SECRET_INTERNAL_DOMAIN}"]
      alertmanagerSpec:
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: "local-nvme"
              accessModes: ["ReadWriteOnce"]
              resources:
                requests:
                  storage: 5Gi
    nodeExporter:
      enabled: true
    prometheus-node-exporter:
      fullnameOverride: node-exporter
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels: ["__meta_kubernetes_pod_node_name"]
              targetLabel: kubernetes_node
    kubeStateMetrics:
      enabled: true
    kube-state-metrics:
      fullnameOverride: kube-state-metrics
      metricLabelsAllowlist:
        - pods=[*]
        - deployments=[*]
        - persistentvolumeclaims=[*]
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels: ["__meta_kubernetes_pod_node_name"]
              targetLabel: kubernetes_node
